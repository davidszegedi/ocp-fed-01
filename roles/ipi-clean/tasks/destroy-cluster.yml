---
- name: Destroy OpenShift cluster(s) in parallel
  shell: "./openshift-install destroy cluster "
  args:
    chdir: "{{ var_user_homepath }}/{{ var_demofolder_name }}/{{ item.name }}/"
  loop: "{{ var_cluster_info }}"
  when: item.destroy == true
  register: cluster_destruction
  async: 1800
  poll: 0

- name: Wait for OpenShift cluster(s) destruction result(s)
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: cluster_destruction_status
  until: cluster_destruction_status.finished
  retries: 100
  delay: 30
  loop: "{{ cluster_destruction.results }}"

- name: Remove .openshift_install.log file
  file:
    path: "{{ var_user_homepath }}/{{ var_demofolder_name }}/{{ item.name }}/.openshift_install.log"
    state: absent
  loop: "{{ var_cluster_info }}"

- name: Remove terraform.tfstate file
  file:
    path: "{{ var_user_homepath }}/{{ var_demofolder_name }}/{{ item.name }}/terraform.tfstate"
    state: absent
  loop: "{{ var_cluster_info }}"

- name: Restore configuration template to clusters folders
  template:
    src: "{{ var_user_homepath }}/{{ var_demofolder_name }}/{{ item.name }}/bkp//install-config.yaml"
    dest: "{{ var_user_homepath }}/{{ var_demofolder_name }}/{{ item.name }}/"
  loop: "{{ var_cluster_info }}"

- name: Restore configuration state to clusters folders
  template:
    src: "{{ var_user_homepath }}/{{ var_demofolder_name }}/{{ item.name }}/bkp/.openshift_install_state.json"
    dest: "{{ var_user_homepath }}/{{ var_demofolder_name }}/{{ item.name }}/"
  loop: "{{ var_cluster_info }}"

- name: Ensure Cloned Git Repository is Removed
  file:
    path: "/home/{{ _clientvm_student_user }}/Git/{{ _lab_git_clone_dir_name }}"
    state: absent
  become: true

- name: Ensure Cloned Gog Repository is Removed
  file:
    path: "/home/{{ _clientvm_student_user }}/Git/{{ _lab_gogs_clone_dir_name }}"
    state: absent
  become: true

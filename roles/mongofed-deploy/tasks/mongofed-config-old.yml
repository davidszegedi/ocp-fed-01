---
- name: Create mongofed config folder
  file:
    path: "~/{{ var_demofolder_name }}/{{ var_mongofed_configfolder_name }}"
    state: directory

- name: Backup kubeconfig files
  copy:
    src: "~/{{ var_demofolder_name }}/{{ item.name }}/auth/kubeconfig"
    dest: "~/{{ var_demofolder_name }}/{{ item.name }}/auth/bkp_kubeconfig"
  loop: "{{ var_cluster_info }}"

- name: Modify kubeconfig files
  replace:
    path: "~/{{ var_demofolder_name }}/{{ item.name }}/auth/kubeconfig"
    regexp: 'admin'
    replace: "{{ item.name }}"
  loop: "{{ var_cluster_info }}"

- name: Concatenate kubeconfig paths
  set_fact:
    kube_concat_path: "{{ kube_concat_path | default() }}:~/{{ var_demofolder_name }}/{{ item.name }}/auth/kubeconfig"
    kube_concat_name: "{{ kube_concat_name | default('aws') }}-{{ item.name }}"
  loop: "{{ var_cluster_info }}"

- name: Remove kubeconfig concat path first separator
  set_fact:
    kube_concat_path: "{{ kube_concat_path | regex_replace('^:(.*)$', '\\1') }}"

- name: Flatten kube concat path
  shell: "export KUBECONFIG={{ kube_concat_path }}; oc config view --flatten > {{ kube_concat_name }}"
  args:
    chdir: "~/{{ var_demofolder_name }}/{{ var_mongofed_configfolder_name }}"
#  environment:
#    KUBECONFIG: "{{ kube_concat_path }}"
  register: occfgv_flatten

- name: Update kubeconfig concat path
  set_fact:
    kube_concat_path: "~/{{ var_demofolder_name }}/{{ var_mongofed_configfolder_name }}/{{ kube_concat_name }}"

- name: Wait for kubefed operator to be available
  pause:
    seconds: 30

- name: Enable the Kubefed Controller Manager
  k8s:
    kubeconfig: "{{ kube_concat_path }}"
    namespace: "{{ var_obj_spec_targetnamespace }}"
    context: "{{ var_kubefed_operator }}"
    state: "{{ install_state }}"
    definition:
      apiVersion: operator.kubefed.io/v1alpha1
      kind: "{{ var_obj_kind }}"
      metadata:
        name: "{{ var_obj_metadata_name }}"
      spec:
        scope: "{{ var_kubefed_scope }}"

- name: Enable federating of objects
  #shell: "export KUBECONFIG={{ kube_concat_path }}; kubefedctl enable {{ item }}"
  shell: "export KUBECONFIG={{ kube_concat_path }}; kubefedctl enable {{ item }} --kubefed-namespace {{ var_obj_spec_targetnamespace }}"
  loop: "{{ var_fed_obj_list }}"
  register: fedobj

- name: Federate OpenShift clusters
  #shell: "export KUBECONFIG={{ kube_concat_path }}; kubefedctl join {{ item.name }} --cluster-context {{  item.name }} --host-cluster-context {{ var_kubefed_operator }} --v=2 }}"
  shell: "export KUBECONFIG={{ kube_concat_path }}; kubefedctl join {{ item.name }} --cluster-context {{  item.name }} --host-cluster-context {{ var_kubefed_operator }} --v=2 --kubefed-namespace={{ var_obj_spec_targetnamespace }}"
  loop: "{{ var_cluster_info }}"
  register: fedocp

- name: "Generate 01-mongo-federated-secret.yaml"
  template:
    src: 01-mongo-federated-secret.yaml.j2
    dest: "~/{{ var_demofolder_name }}/{{ var_mongofed_configfolder_name }}/01-mongo-federated-secret.yaml"

- name: "Generate 02-mongo-federated-service.yaml.j2"
  template:
    src: 02-mongo-federated-service.yaml.j2
    dest: "~/{{ var_demofolder_name }}/{{ var_mongofed_configfolder_name }}/02-mongo-federated-service.yaml"

- name: "Generate 03-mongo-federated-pvc.yaml"
  template:
    src: 03-mongo-federated-pvc.yaml.j2
    dest: "~/{{ var_demofolder_name }}/{{ var_mongofed_configfolder_name }}/03-mongo-federated-pvc.yaml"

- name: "Generate 04-mongo-federated-deployment-rs.yaml"
  template:
    src: 04-mongo-federated-deployment-rs.yaml.j2
    dest: "~/{{ var_demofolder_name }}/{{ var_mongofed_configfolder_name }}/04-mongo-federated-deployment-rs.yaml"
